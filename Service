public class Myservice extends Service{
    ImageButton Play;
    ImageButton Last;
    ImageButton Next;
    ImageButton Menu;
    TextView tv;
    private int[] _ids;
    private int[] _album_id;
    private int[] durations;
    private String[] _titles;
    private String[] albums;
    private String[] artists;
    private String[] _path;
    private ContentResolver cr;        //获得共享数据库
    private Cursor mCursor;            //歌曲信息列表
    private ListView listView; //列表框，用来展示音乐名称
    private Cursor c;  //用来查询媒体库
    private MediaPlayer mediaPlayer =new MediaPlayer();
    int content =1;
    int count;


    public void setListData() {
        //查询数据库
        c = this.getContentResolver().query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,
                new String[]{
                        MediaStore.Audio.Media.TITLE,
                        MediaStore.Audio.Media.DURATION,
                        MediaStore.Audio.Media.ARTIST,
                        MediaStore.Audio.Media._ID,
                        MediaStore.Audio.Media.ALBUM,
                        MediaStore.Audio.Media.DATA,
                        MediaStore.Audio.Media.ALBUM_ID
                }, null, null, null);
        c.moveToFirst(); //将游标放到第一处
        count = c.getCount();//得到媒体库中音乐的个数
        //初始化数组
        _ids = new int[count];
        _album_id = new int[count];
        durations = new int[count];
        _titles = new String[count];
        albums = new String[count];
        artists = new String[count];
        _path = new String[count];
        //为数组赋值
        for (int i = 0; i < count; i++) {
            _ids[i] = c.getInt(3);
            _album_id[i] = c.getInt(6);
            durations[i] = c.getInt(1);
            _titles[i] = c.getString(0).trim();
            albums[i] = c.getString(4).trim();
            artists[i] = c.getString(2).trim();
            _path[i] = c.getString(5).trim();
            c.moveToNext();
        }
        // 给列表加载数据
    }


    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        setListData();
        Log.d("creat..........................................","creat...............................");
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        NotificationManager mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
        NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this);
        mBuilder.setContentTitle("测试标题")//设置通知栏标题
                .setContentText("测试内容")

       // .setContentIntent(getDefalutIntent(Notification.FLAG_AUTO_CANCEL)) //设置通知栏点击意图
//  .setNumber(number) //设置通知集合的数量
                .setTicker("测试通知来啦") //通知首次出现在通知栏，带上升动画效果的
                .setWhen(System.currentTimeMillis())//通知产生的时间，会在通知信息里显示，一般是系统获取到的时间
                .setPriority(Notification.PRIORITY_DEFAULT) //设置该通知优先级
//  .setAutoCancel(true)//设置这个标志当用户单击面板就可以让通知将自动取消
                .setOngoing(false)//ture，设置他为一个正在进行的通知。他们通常是用来表示一个后台任务,用户积极参与(如播放音乐)或以某种方式正在等待,因此占用设备(如一个文件下载,同步操作,主动网络连接)
                .setDefaults(Notification.DEFAULT_VIBRATE)//向通知添加声音、闪灯和振动效果的最简单、最一致的方式是使用当前的用户默认设置，使用defaults属性，可以组合
                .setSmallIcon(R.drawable.play);//设置通知小ICON
        MainActivity mainActivity=new MainActivity();
       int c= mainActivity.cc;
        if(mediaPlayer.isPlaying()){
            mediaPlayer.reset();
        }
        try {
            mediaPlayer.setDataSource(_path[content]);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            mediaPlayer.prepare();
        } catch (IOException e) {
            e.printStackTrace();
        }
        mediaPlayer.start();
        return super.onStartCommand(intent,flags,startId);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d("creat..........................................", "onDestroy..............................");
    }
}
